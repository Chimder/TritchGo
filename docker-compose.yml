services:
  postgres:
    image: postgres
    container_name: GoStats
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  pgweb:
    image: sosedoff/pgweb
    container_name: pgwebTritch
    restart: always
    depends_on:
      - postgres
    environment:
      PGWEB_DATABASE_URL: "postgres://postgres:postgres@GoStats:5432/postgres?sslmode=disable"
    ports:
      - "8081:8081"

  elasticsearch:
    image: elasticsearch:8.18.0
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"

volumes:
  pgdata:

  # gotritch:
  #   image: gomintv1
  #   container_name: gotritch
  #   restart: always
  #   depends_on:
  #     - postgres
  #     - redis
  #   environment:
  #     DB_URL: "postgresql://postgres:postgres@GoStats:5432/postgres?sslmode=disable"
  #   ports:
  #     - "8080:8080"
  #   env_file:
  #     - .env
# volumes:
#   pgdata:

# volumes:
#   postgres_data:

# version: '3'
# services:
#   prometheus:
#     image: prom/prometheus
#     container_name: prometheus
#     ports:
#       - 9090:9090
#     volumes:
#       - ./prometheus.yml:/etc/prometheus/prometheus.yml
#     networks:
#       - monitoring
#   grafana:
#     image: grafana/grafana-oss:latest
#     container_name: grafana
#     ports:
#       - "3000:3000"
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=admin
#     networks:
#       - monitoring
#     depends_on:
#       - prometheus
#   node_exporter:
#     image: prom/node-exporter:latest
#     container_name: node_exporter
#     ports:
#       - "9100:9100"
#     networks:
#       - monitoring
#     restart: unless-stopped

# networks:
#   monitoring:
#     driver: bridge

# services:
#   postgres:
#     image: postgres:latest
#     container_name: postgresV2
#     ports:
#       - "5432:5432"
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: postgres
#     networks:
#       - tritch-network

#   app:
#     build: .
#     ports:
#       - "8080:8080"
#     # env_file:
#     #   - .env
#     environment:
#       DB_URL: postgresql://postgres:postgres@postgresV2:5432/postgres?sslmode=disable
#       CLIENT_ID: ${CLIENT_ID}
#       CLIENT_SECRET: ${CLIENT_SECRET}
#     depends_on:
#       - postgres
#     networks:
#       - tritch-network

# networks:
#   tritch-network:
#     driver: bridge
