// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: stream_stats/stream_stats.proto

package stream_stats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamStatsService_GetUserStats_FullMethodName   = "/stream_stats.StreamStatsService/GetUserStats"
	StreamStatsService_GetStreamStats_FullMethodName = "/stream_stats.StreamStatsService/GetStreamStats"
)

// StreamStatsServiceClient is the client API for StreamStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamStatsServiceClient interface {
	GetUserStats(ctx context.Context, in *UserStatsRequest, opts ...grpc.CallOption) (*UserStatsResponse, error)
	GetStreamStats(ctx context.Context, in *StreamStatsRequest, opts ...grpc.CallOption) (*StreamStatsResponse, error)
}

type streamStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamStatsServiceClient(cc grpc.ClientConnInterface) StreamStatsServiceClient {
	return &streamStatsServiceClient{cc}
}

func (c *streamStatsServiceClient) GetUserStats(ctx context.Context, in *UserStatsRequest, opts ...grpc.CallOption) (*UserStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStatsResponse)
	err := c.cc.Invoke(ctx, StreamStatsService_GetUserStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamStatsServiceClient) GetStreamStats(ctx context.Context, in *StreamStatsRequest, opts ...grpc.CallOption) (*StreamStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamStatsResponse)
	err := c.cc.Invoke(ctx, StreamStatsService_GetStreamStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamStatsServiceServer is the server API for StreamStatsService service.
// All implementations must embed UnimplementedStreamStatsServiceServer
// for forward compatibility.
type StreamStatsServiceServer interface {
	GetUserStats(context.Context, *UserStatsRequest) (*UserStatsResponse, error)
	GetStreamStats(context.Context, *StreamStatsRequest) (*StreamStatsResponse, error)
	mustEmbedUnimplementedStreamStatsServiceServer()
}

// UnimplementedStreamStatsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamStatsServiceServer struct{}

func (UnimplementedStreamStatsServiceServer) GetUserStats(context.Context, *UserStatsRequest) (*UserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedStreamStatsServiceServer) GetStreamStats(context.Context, *StreamStatsRequest) (*StreamStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamStats not implemented")
}
func (UnimplementedStreamStatsServiceServer) mustEmbedUnimplementedStreamStatsServiceServer() {}
func (UnimplementedStreamStatsServiceServer) testEmbeddedByValue()                            {}

// UnsafeStreamStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamStatsServiceServer will
// result in compilation errors.
type UnsafeStreamStatsServiceServer interface {
	mustEmbedUnimplementedStreamStatsServiceServer()
}

func RegisterStreamStatsServiceServer(s grpc.ServiceRegistrar, srv StreamStatsServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamStatsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamStatsService_ServiceDesc, srv)
}

func _StreamStatsService_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamStatsServiceServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamStatsService_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamStatsServiceServer).GetUserStats(ctx, req.(*UserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamStatsService_GetStreamStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamStatsServiceServer).GetStreamStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamStatsService_GetStreamStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamStatsServiceServer).GetStreamStats(ctx, req.(*StreamStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamStatsService_ServiceDesc is the grpc.ServiceDesc for StreamStatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamStatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_stats.StreamStatsService",
	HandlerType: (*StreamStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserStats",
			Handler:    _StreamStatsService_GetUserStats_Handler,
		},
		{
			MethodName: "GetStreamStats",
			Handler:    _StreamStatsService_GetStreamStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream_stats/stream_stats.proto",
}
